
upstream <%= fetch(:application) %>_server {
  server 0.0.0.0:7030;
  server 0.0.0.0:7031;
  server 0.0.0.0:7032;
  server 0.0.0.0:7033;
  server 0.0.0.0:7034;
  server 0.0.0.0:7035;
  server 0.0.0.0:7036;
  server 0.0.0.0:7037;
  server 0.0.0.0:7038;
  server 0.0.0.0:7039;
}

server {
  listen 80;

  client_max_body_size 4G;
  server_name <%= fetch(:server_domain_name) %>;

  access_log <%= shared_path %>/log/nginx_access.log;
  error_log <%= shared_path %>/log/nginx_error.log error;

  keepalive_timeout 5;

  # path for static files
  root <%= current_path %>/public;

  # Prefer to serve static files directly from nginx to avoid unnecessary
  # data copies from the application server.
  #
  # try_files directive appeared in in nginx 0.7.27 and has stabilized
  # over time.  Older versions of nginx (e.g. 0.6.x) requires
  # "if (!-f $request_filename)" which was less efficient:
  # http://bogomips.org/unicorn.git/tree/examples/nginx.conf?id=v3.3.1#n127
  try_files $uri/index.html $uri.html $uri @app;

  location @app {
    # an HTTP header important enough to have its own Wikipedia entry:
    #   http://en.wikipedia.org/wiki/X-Forwarded-For
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    # enable this if you forward HTTPS traffic to unicorn,
    # this helps Rack set the proper URL scheme for doing redirects:
    # proxy_set_header X-Forwarded-Proto $scheme;

    # pass the Host: header from the client right along so redirects
    # can be set properly within the Rack application
    proxy_set_header Host $http_host;

    # we don't want nginx trying to do something clever with
    # redirects, we set the Host: header above already.
    proxy_redirect off;

    proxy_pass http://<%= fetch(:application) %>_server;
  }

  error_page 500 502 503 504 /500.html;
    location = /500.html {
    root <%= current_path %>/public;
  }
}
